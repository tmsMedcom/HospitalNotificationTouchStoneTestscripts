@prefix fhir: <http://hl7.org/fhir/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# - resource -------------------------------------------------------------------

<http://example.org/fhir/fish/TestScript/hospitalnotification-PF-send-imp-05> a fhir:TestScript ;
  fhir:nodeRole fhir:treeRoot ;
  fhir:id [ fhir:v "hospitalnotification-PF-send-imp-05"] ; # 
  fhir:meta [
     fhir:profile ( [
       fhir:v "http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript"^^xsd:anyURI ;
       fhir:link <http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript>
     ] )
  ] ; # 
  fhir:text [
     fhir:status [ fhir:v "generated" ] ;
     fhir:div "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative: TestScript</b><a name=\"hospitalnotification-PF-send-imp-05\"> </a></p><div style=\"display: inline-block; background-color: #d9e0e7; padding: 6px; margin: 4px; border: 1px solid #8da1b4; border-radius: 5px; line-height: 60%\"><p style=\"margin-bottom: 0px\">Resource TestScript &quot;hospitalnotification-PF-send-imp-05&quot; </p><p style=\"margin-bottom: 0px\">Profile: <code>http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript</code></p></div><p><b>url</b>: <code>https://medcomfhir.dk/ig/hospitalnotification/</code></p><p><b>version</b>: 1.0.0-b1</p><p><b>name</b>: Send: Admit patient, correct message due to incorrect hospital department. Evaluation is based on GLN number.</p><p><b>title</b>: Send: Admit patient, correct message due to incorrect hospital department. Evaluation is based on GLN number.- PF-send-imp-02</p><p><b>status</b>: active</p><p><b>date</b>: 2023-04-01</p><p><b>publisher</b>: MedCom</p><p><b>contact</b>: MedCom: <a href=\"mailto:fhir@medcom.dk\">fhir@medcom.dk</a></p><p><b>description</b>: Testing correct use of send HospitalNotification</p><p><b>copyright</b>: MedCom 2021</p><h3>Origins</h3><table class=\"grid\"><tr><td>-</td><td><b>Index</b></td><td><b>Profile</b></td></tr><tr><td>*</td><td>1</td><td>FHIR Client (Details: http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types code FHIR-Client = 'FHIR Client', stated as 'null')</td></tr></table><h3>Destinations</h3><table class=\"grid\"><tr><td>-</td><td><b>Index</b></td><td><b>Profile</b></td></tr><tr><td>*</td><td>1</td><td>FHIR Server (Details: http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types code FHIR-Server = 'FHIR Server', stated as 'null')</td></tr></table><blockquote><p><b>fixture</b></p><blockquote><p><b>id</b></p>create-STIN-01</blockquote><p><b>autocreate</b>: false</p><p><b>autodelete</b>: false</p><p><b>resource</b>: <a href=\"/FHIRSandbox/MedCom/HospitalNotificationTMS/HospitalNotification-fixture.xml\">/FHIRSandbox/MedCom/HospitalNotificationTMS/HospitalNotification-fixture.xml</a></p></blockquote><blockquote><p><b>fixture</b></p><blockquote><p><b>id</b></p>create-RE-STIN-02</blockquote><p><b>autocreate</b>: false</p><p><b>autodelete</b>: false</p><p><b>resource</b>: <a href=\"/FHIRSandbox/MedCom/HospitalNotificationTMS/HospitalNotification-fixture.xml\">/FHIRSandbox/MedCom/HospitalNotificationTMS/HospitalNotification-fixture.xml</a></p></blockquote><p><b>profile</b>: <a href=\"http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-hospitalNotification-message\">http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-hospitalNotification-message</a></p><blockquote><p><b>variable</b></p><p><b>name</b>: messageHeaderid-STIN</p><p><b>expression</b>: Bundle.entry[0].fullUrl</p><p><b>sourceId</b>: create-message-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: episodeOfCareID-STIN</p><p><b>expression</b>: Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value</p><p><b>sourceId</b>: create-message-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: searchParamIdentifier-STIN</p><p><b>expression</b>: Bundle.entry.resource.ofType(MessageHeader).id</p><p><b>sourceId</b>: create-message-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: occurredDateTime-STIN</p><p><b>expression</b>: Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).occurred</p><p><b>sourceId</b>: create-message-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: hospitalGLN-STIN</p><p><b>expression</b>: Bundle.entry.where(fullUrl = %resource.entry.resource[0].sender.reference).resource.identifier.where(system = 'https://www.gs1.org/gln').value</p><p><b>sourceId</b>: create-message-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: messageHeaderid-RE-STIN</p><p><b>expression</b>: Bundle.entry[0].fullUrl</p><p><b>sourceId</b>: create-message-RE-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: episodeOfCareID-RE-STIN</p><p><b>expression</b>: Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value</p><p><b>sourceId</b>: create-message-RE-STIN</p></blockquote><blockquote><p><b>test</b></p><blockquote><p><b>id</b></p>hospitalnotification-create-STIN-01</blockquote><p><b>name</b>: Create a HospitalNotification STIN Message 01</p><p><b>description</b>: Post HospitalNotification to the server.</p><blockquote><p><b>action</b></p><h3>Operations</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Resource</b></td><td><b>Description</b></td><td><b>Destination</b></td><td><b>EncodeRequestUrl</b></td><td><b>Origin</b></td><td><b>ResponseId</b></td><td><b>SourceId</b></td></tr><tr><td>*</td><td>Create (Details: http://terminology.hl7.org/CodeSystem/testscript-operation-codes code create = 'Create', stated as 'null')</td><td>Bundle</td><td>Post a Hospitalnotification</td><td>1</td><td>true</td><td>1</td><td>create-message-STIN</td><td>create-STIN-01</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Operator</b></td><td><b>ResponseCode</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the returned HTTP status is okay or created.</td><td>response</td><td>in</td><td>200,201</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Resource</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the client request payload contains a Bundle resource type.</td><td>request</td><td>Bundle</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected eventCoding.code.</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Encounter class of the request resource is IMP.</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).class.code</td><td>equals</td><td>IMP</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Encounter status of the request resource is in-progress.</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).status</td><td>equals</td><td>in-progress</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected activity code.</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'admit-inpatient').exists()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the report of admission flag is true.</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).extension.where(url='http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-messaging-reportOfAdmissionExtension').value</td><td>equals</td><td>true</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the target reference in Provenance equals MessageHeader.id</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the episodeOfCare-identifier has the structure of an UUID</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value.matches('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the a receiver of the report of admission exists, when the flag is true, and doesn't exists when the flag is false.</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).extension.where(url='http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-messaging-reportOfAdmissionRecipientExtension').exists() = true</td><td>false</td></tr></table></blockquote></blockquote><blockquote><p><b>test</b></p><blockquote><p><b>id</b></p>hospitalnotification-create-RE-STIN-02</blockquote><p><b>name</b>: Create a HospitalNotification RE-STIN Message 02</p><p><b>description</b>: Post HospitalNotification to the server.</p><blockquote><p><b>action</b></p><h3>Operations</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Resource</b></td><td><b>Description</b></td><td><b>Destination</b></td><td><b>EncodeRequestUrl</b></td><td><b>Origin</b></td><td><b>ResponseId</b></td><td><b>SourceId</b></td></tr><tr><td>*</td><td>Create (Details: http://terminology.hl7.org/CodeSystem/testscript-operation-codes code create = 'Create', stated as 'null')</td><td>Bundle</td><td>Post a Hospitalnotification</td><td>1</td><td>true</td><td>1</td><td>create-message-RE-STIN</td><td>create-RE-STIN-02</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Operator</b></td><td><b>ResponseCode</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the returned HTTP status is okay or created.</td><td>response</td><td>in</td><td>200,201</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Resource</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the client request payload contains a Bundle resource type.</td><td>request</td><td>Bundle</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the previous MessageHeader fullURL is identical to Provenance.entity.what</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(entity.what.reference = '${messageHeaderid-STIN}').count() = 1</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected eventCoding.code.</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the role is set to revision. Not used when testing the first message in a stream</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).entity.role</td><td>equals</td><td>revision</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Encounter class of the request resource is IMP.</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).class.code</td><td>equals</td><td>IMP</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Encounter status of the request resource is in-progress.</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).status</td><td>equals</td><td>in-progress</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected activity code.</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'revise-admit-inpatient').exists()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the target reference in Provenance equals MessageHeader.id</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the 2 Provenance instances exists.</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).count()</td><td>equals</td><td>2</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the episodeOfCare-identifier is episodeOfCareID-STIN</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).where(episodeOfCare.identifier.value = '${episodeOfCareID-STIN}').count() = 1</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the sender GLN number is different from the previous message.</td><td>request</td><td>Bundle.entry.where(fullUrl = %resource.entry.resource[0].sender.reference).resource.identifier.where(system = 'https://www.gs1.org/gln').value != ${hospitalGLN-STIN}</td><td>false</td></tr></table></blockquote></blockquote></div>"
  ] ; # 
  fhir:url [ fhir:v "https://medcomfhir.dk/ig/hospitalnotification/"^^xsd:anyURI] ; # 
  fhir:version [ fhir:v "1.0.0-b1"] ; # 
  fhir:name [ fhir:v "Send: Admit patient, correct message due to incorrect hospital department. Evaluation is based on GLN number."] ; # 
  fhir:title [ fhir:v "Send: Admit patient, correct message due to incorrect hospital department. Evaluation is based on GLN number.- PF-send-imp-02"] ; # 
  fhir:status [ fhir:v "active"] ; # 
  fhir:date [ fhir:v "2023-04-01"^^xsd:date] ; # 
  fhir:publisher [ fhir:v "MedCom"] ; # 
  fhir:contact ( [
     fhir:name [ fhir:v "MedCom" ] ;
     fhir:telecom ( [
       fhir:system [ fhir:v "email" ] ;
       fhir:value [ fhir:v "fhir@medcom.dk" ]
     ] )
  ] ) ; # 
  fhir:description [ fhir:v "Testing correct use of send HospitalNotification"] ; # 
  fhir:copyright [ fhir:v "MedCom 2021"] ; # 
  fhir:origin ( [
     fhir:index [ fhir:v "1"^^xsd:integer ] ;
     fhir:profile [
       fhir:system [ fhir:v "http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types"^^xsd:anyURI ] ;
       fhir:code [ fhir:v "FHIR-Client" ]
     ]
  ] ) ; # 
  fhir:destination ( [
     fhir:index [ fhir:v "1"^^xsd:integer ] ;
     fhir:profile [
       fhir:system [ fhir:v "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types"^^xsd:anyURI ] ;
       fhir:code [ fhir:v "FHIR-Server" ]
     ]
  ] ) ; # 
  fhir:fixture ( [
     fhir:id [ fhir:v "create-STIN-01" ] ;
     fhir:autocreate [ fhir:v "false"^^xsd:boolean ] ;
     fhir:autodelete [ fhir:v "false"^^xsd:boolean ] ;
     fhir:resource [
       fhir:link <http://example.org/fhir/fish//FHIRSandbox/MedCom/HospitalNotificationTMS/HospitalNotification-fixture.xml> ;
       fhir:reference [ fhir:v "/FHIRSandbox/MedCom/HospitalNotificationTMS/HospitalNotification-fixture.xml" ]
     ]
  ] [
     fhir:id [ fhir:v "create-RE-STIN-02" ] ;
     fhir:autocreate [ fhir:v "false"^^xsd:boolean ] ;
     fhir:autodelete [ fhir:v "false"^^xsd:boolean ] ;
     fhir:resource [
       fhir:link <http://example.org/fhir/fish//FHIRSandbox/MedCom/HospitalNotificationTMS/HospitalNotification-fixture.xml> ;
       fhir:reference [ fhir:v "/FHIRSandbox/MedCom/HospitalNotificationTMS/HospitalNotification-fixture.xml" ]
     ]
  ] ) ; # 
  fhir:profile ( [
     fhir:link <http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-hospitalNotification-message> ;
     fhir:id [ fhir:v "hospitalnotification" ] ;
     fhir:reference [ fhir:v "http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-hospitalNotification-message" ]
  ] ) ; # 
  fhir:variable ( [
     fhir:name [ fhir:v "messageHeaderid-STIN" ] ;
     fhir:expression [ fhir:v "Bundle.entry[0].fullUrl" ] ;
     fhir:sourceId [ fhir:v "create-message-STIN" ]
  ] [
     fhir:name [ fhir:v "episodeOfCareID-STIN" ] ;
     fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value" ] ;
     fhir:sourceId [ fhir:v "create-message-STIN" ]
  ] [
     fhir:name [ fhir:v "searchParamIdentifier-STIN" ] ;
     fhir:expression [ fhir:v "Bundle.entry.resource.ofType(MessageHeader).id" ] ;
     fhir:sourceId [ fhir:v "create-message-STIN" ]
  ] [
     fhir:name [ fhir:v "occurredDateTime-STIN" ] ;
     fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).occurred" ] ;
     fhir:sourceId [ fhir:v "create-message-STIN" ]
  ] [
     fhir:name [ fhir:v "hospitalGLN-STIN" ] ;
     fhir:expression [ fhir:v "Bundle.entry.where(fullUrl = %resource.entry.resource[0].sender.reference).resource.identifier.where(system = 'https://www.gs1.org/gln').value" ] ;
     fhir:sourceId [ fhir:v "create-message-STIN" ]
  ] [
     fhir:name [ fhir:v "messageHeaderid-RE-STIN" ] ;
     fhir:expression [ fhir:v "Bundle.entry[0].fullUrl" ] ;
     fhir:sourceId [ fhir:v "create-message-RE-STIN" ]
  ] [
     fhir:name [ fhir:v "episodeOfCareID-RE-STIN" ] ;
     fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value" ] ;
     fhir:sourceId [ fhir:v "create-message-RE-STIN" ]
  ] ) ; # 
  fhir:test ( [
     fhir:id [ fhir:v "hospitalnotification-create-STIN-01" ] ;
     fhir:name [ fhir:v "Create a HospitalNotification STIN Message 01" ] ;
     fhir:description [ fhir:v "Post HospitalNotification to the server." ] ;
     fhir:action ( [
       fhir:operation [
         fhir:type [
           fhir:system [ fhir:v "http://terminology.hl7.org/CodeSystem/testscript-operation-codes"^^xsd:anyURI ] ;
           fhir:code [ fhir:v "create" ]
         ] ;
         fhir:resource [ fhir:v "Bundle" ] ;
         fhir:description [ fhir:v "Post a Hospitalnotification" ] ;
         fhir:destination [ fhir:v "1"^^xsd:integer ] ;
         fhir:encodeRequestUrl [ fhir:v "true"^^xsd:boolean ] ;
         fhir:origin [ fhir:v "1"^^xsd:integer ] ;
         fhir:responseId [ fhir:v "create-message-STIN" ] ;
         fhir:sourceId [ fhir:v "create-STIN-01" ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the returned HTTP status is okay or created." ] ;
         fhir:direction [ fhir:v "response" ] ;
         fhir:operator [ fhir:v "in" ] ;
         fhir:responseCode [ fhir:v "200,201" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the client request payload contains a Bundle resource type." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:resource [ fhir:v "Bundle" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the request resource contains the expected eventCoding.code." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the Encounter class of the request resource is IMP." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Encounter).class.code" ] ;
         fhir:operator [ fhir:v "equals" ] ;
         fhir:value [ fhir:v "IMP" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the Encounter status of the request resource is in-progress." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Encounter).status" ] ;
         fhir:operator [ fhir:v "equals" ] ;
         fhir:value [ fhir:v "in-progress" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the request resource contains the expected activity code." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'admit-inpatient').exists()" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the report of admission flag is true." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(MessageHeader).extension.where(url='http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-messaging-reportOfAdmissionExtension').value" ] ;
         fhir:operator [ fhir:v "equals" ] ;
         fhir:value [ fhir:v "true" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the target reference in Provenance equals MessageHeader.id" ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the episodeOfCare-identifier has the structure of an UUID" ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value.matches('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the a receiver of the report of admission exists, when the flag is true, and doesn't exists when the flag is false." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(MessageHeader).extension.where(url='http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-messaging-reportOfAdmissionRecipientExtension').exists() = true" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] )
  ] [
     fhir:id [ fhir:v "hospitalnotification-create-RE-STIN-02" ] ;
     fhir:name [ fhir:v "Create a HospitalNotification RE-STIN Message 02" ] ;
     fhir:description [ fhir:v "Post HospitalNotification to the server." ] ;
     fhir:action ( [
       fhir:operation [
         fhir:type [
           fhir:system [ fhir:v "http://terminology.hl7.org/CodeSystem/testscript-operation-codes"^^xsd:anyURI ] ;
           fhir:code [ fhir:v "create" ]
         ] ;
         fhir:resource [ fhir:v "Bundle" ] ;
         fhir:description [ fhir:v "Post a Hospitalnotification" ] ;
         fhir:destination [ fhir:v "1"^^xsd:integer ] ;
         fhir:encodeRequestUrl [ fhir:v "true"^^xsd:boolean ] ;
         fhir:origin [ fhir:v "1"^^xsd:integer ] ;
         fhir:responseId [ fhir:v "create-message-RE-STIN" ] ;
         fhir:sourceId [ fhir:v "create-RE-STIN-02" ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the returned HTTP status is okay or created." ] ;
         fhir:direction [ fhir:v "response" ] ;
         fhir:operator [ fhir:v "in" ] ;
         fhir:responseCode [ fhir:v "200,201" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the client request payload contains a Bundle resource type." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:resource [ fhir:v "Bundle" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the previous MessageHeader fullURL is identical to Provenance.entity.what" ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Provenance).where(entity.what.reference = '${messageHeaderid-STIN}').count() = 1" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the request resource contains the expected eventCoding.code." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the role is set to revision. Not used when testing the first message in a stream" ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Provenance).entity.role" ] ;
         fhir:operator [ fhir:v "equals" ] ;
         fhir:value [ fhir:v "revision" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the Encounter class of the request resource is IMP." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Encounter).class.code" ] ;
         fhir:operator [ fhir:v "equals" ] ;
         fhir:value [ fhir:v "IMP" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the Encounter status of the request resource is in-progress." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Encounter).status" ] ;
         fhir:operator [ fhir:v "equals" ] ;
         fhir:value [ fhir:v "in-progress" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the request resource contains the expected activity code." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'revise-admit-inpatient').exists()" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the target reference in Provenance equals MessageHeader.id" ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the 2 Provenance instances exists." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Provenance).count()" ] ;
         fhir:operator [ fhir:v "equals" ] ;
         fhir:value [ fhir:v "2" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the episodeOfCare-identifier is episodeOfCareID-STIN" ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.resource.ofType(Encounter).where(episodeOfCare.identifier.value = '${episodeOfCareID-STIN}').count() = 1" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] [
       fhir:assert [
         fhir:description [ fhir:v "Confirm that the sender GLN number is different from the previous message." ] ;
         fhir:direction [ fhir:v "request" ] ;
         fhir:expression [ fhir:v "Bundle.entry.where(fullUrl = %resource.entry.resource[0].sender.reference).resource.identifier.where(system = 'https://www.gs1.org/gln').value != ${hospitalGLN-STIN}" ] ;
         fhir:warningOnly [ fhir:v "false"^^xsd:boolean ]
       ]
     ] )
  ] ) . # 

# -------------------------------------------------------------------------------------

